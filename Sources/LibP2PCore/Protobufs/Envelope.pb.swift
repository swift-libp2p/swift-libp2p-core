//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-libp2p open source project
//
// Copyright (c) 2022-2025 swift-libp2p project authors
// Licensed under MIT
//
// See LICENSE for license information
// See CONTRIBUTORS for the list of swift-libp2p project authors
//
// SPDX-License-Identifier: MIT
//
//===----------------------------------------------------------------------===//

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Envelope.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Envelope encloses a signed payload produced by a peer, along with the public
/// key of the keypair it was signed with so that it can be statelessly validated
/// by the receiver.
///
/// The payload is prefixed with a byte string that determines the type, so it
/// can be deserialized deterministically. Often, this byte string is a
/// multicodec.
struct EnvelopeMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// public_key is the public key of the keypair the enclosed payload was
  /// signed with.
  var publicKey: EnvelopeMessage.PublicKey {
    get {return _publicKey ?? EnvelopeMessage.PublicKey()}
    set {_publicKey = newValue}
  }
  /// Returns true if `publicKey` has been explicitly set.
  var hasPublicKey: Bool {return self._publicKey != nil}
  /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
  mutating func clearPublicKey() {self._publicKey = nil}

  /// payload_type encodes the type of payload, so that it can be deserialized
  /// deterministically.
  var payloadType: Data {
    get {return _payloadType ?? Data()}
    set {_payloadType = newValue}
  }
  /// Returns true if `payloadType` has been explicitly set.
  var hasPayloadType: Bool {return self._payloadType != nil}
  /// Clears the value of `payloadType`. Subsequent reads from it will return its default value.
  mutating func clearPayloadType() {self._payloadType = nil}

  /// payload is the actual payload carried inside this envelope.
  var payload: Data {
    get {return _payload ?? Data()}
    set {_payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  var hasPayload: Bool {return self._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  mutating func clearPayload() {self._payload = nil}

  /// signature is the signature produced by the private key corresponding to
  /// the enclosed public key, over the payload, prefixing a domain string for
  /// additional security.
  var signature: Data {
    get {return _signature ?? Data()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  mutating func clearSignature() {self._signature = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum KeyType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case rsa // = 0
    case ed25519 // = 1
    case secp256K1 // = 2

    init() {
      self = .rsa
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .rsa
      case 1: self = .ed25519
      case 2: self = .secp256K1
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .rsa: return 0
      case .ed25519: return 1
      case .secp256K1: return 2
      }
    }

  }

  struct PublicKey {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var type: EnvelopeMessage.KeyType {
      get {return _type ?? .rsa}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    mutating func clearType() {self._type = nil}

    var data: Data {
      get {return _data ?? Data()}
      set {_data = newValue}
    }
    /// Returns true if `data` has been explicitly set.
    var hasData: Bool {return self._data != nil}
    /// Clears the value of `data`. Subsequent reads from it will return its default value.
    mutating func clearData() {self._data = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _type: EnvelopeMessage.KeyType? = nil
    fileprivate var _data: Data? = nil
  }

  init() {}

  fileprivate var _publicKey: EnvelopeMessage.PublicKey? = nil
  fileprivate var _payloadType: Data? = nil
  fileprivate var _payload: Data? = nil
  fileprivate var _signature: Data? = nil
}

#if swift(>=4.2)

extension EnvelopeMessage.KeyType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension EnvelopeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Envelope"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key"),
    2: .standard(proto: "payload_type"),
    3: .same(proto: "payload"),
    5: .same(proto: "signature"),
  ]

  public var isInitialized: Bool {
    if self._publicKey == nil {return false}
    if self._payloadType == nil {return false}
    if self._payload == nil {return false}
    if self._signature == nil {return false}
    if let v = self._publicKey, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._publicKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._payloadType) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._payload) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._publicKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._payloadType {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._payload {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    if let v = self._signature {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EnvelopeMessage, rhs: EnvelopeMessage) -> Bool {
    if lhs._publicKey != rhs._publicKey {return false}
    if lhs._payloadType != rhs._payloadType {return false}
    if lhs._payload != rhs._payload {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EnvelopeMessage.KeyType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RSA"),
    1: .same(proto: "Ed25519"),
    2: .same(proto: "Secp256k1"),
  ]
}

extension EnvelopeMessage.PublicKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = EnvelopeMessage.protoMessageName + ".PublicKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Type"),
    2: .same(proto: "Data"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._data == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EnvelopeMessage.PublicKey, rhs: EnvelopeMessage.PublicKey) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
